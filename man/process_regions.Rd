% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/process_regions.R
\name{process_regions}
\alias{process_regions}
\title{Process Regions objects.}
\usage{
process_regions(
  regions_list = NULL,
  regions_bed = NULL,
  region_padding = 0,
  skip_regions = NULL,
  only_regions = NULL,
  projection = "grch37",
  sort = FALSE
)
}
\arguments{
\item{regions_list}{Character vector of genomic regions. If neither regions nor regions_df is specified, will use GAMBLR aSHM regions}

\item{regions_bed}{Data frame of genomic regions with column names "chrom", "start", "end", "name"}

\item{region_padding}{Amount to pad the start and end coordinates by. The default is 0 (no padding).}

\item{skip_regions}{Character vector of genes to drop from GAMBLR aSHM regions.}

\item{only_regions}{Character vector of genes to include from GAMBLR aSHM regions.}

\item{projection}{Specify which genome build projection to use. The default is "grch37", also accepts "hg38".}

\item{sort}{Set to TRUE to force regions_bed to be ordered on chromosome and coordinate}
}
\value{
A list with two objects, regions as a vector and in bed format.
}
\description{
INTERNAL FUNCTION to harmonize genomic regions specified as character vectors or data frames.
}
\details{
INTERNAL FUNCTION to harmonize genomic regions specified as character vectors or data frames.
}
\examples{
library(dplyr)

regions <- setNames(
     c("chr1:10000-15000", "chr1:100000000-100005000"),
     c("one_region", "another_region")
)
process_regions(regions_list = regions)

reg_bed = GAMBLR.data::grch37_ashm_regions \%>\%
dplyr::filter(chr_name == "chr17") \%>\%
  mutate(name = region, chrom = chr_name, start = hg19_start, end = hg19_end) \%>\%
  select(chrom, start, end, name)

process_regions(regions_bed = reg_bed)

}
