% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cool_overlaps.R
\name{cool_overlaps}
\alias{cool_overlaps}
\title{Cool overlap of data frames.}
\usage{
cool_overlaps(
  data1,
  data2,
  columns1 = c("Chromosome", "Start_Position", "End_Position"),
  columns2 = c("Chromosome", "Start_Position", "End_Position"),
  type = "any"
)
}
\arguments{
\item{data1}{Data frame with data to overlap. Required parameter. The minimal
required columns are those supplied with the argument columns1. Will
dictate the naming of the columns used for overlap in the output.}

\item{data2}{Data frame with data to overlap. Required parameter. The minimal
required columns are those supplied with the argument columns2.}

\item{columns1}{The list of columns from data frame data1 to be used to find
overlapping regions.}

\item{columns2}{The list of columns from data frame data2 to be used to find
overlapping regions.}

\item{type}{Character specifying the way to find overlaps. Accepted values
are "any" (used as default), "start", "end", "within", and "equal".
Please see function description for more details of different types.}
}
\value{
data frame
}
\description{
This function implements overlap of 2 data frames that contain
regions of coordinates similar to what data.table::foverlaps does. Unlike
foverlaps, this function takes as input data frame class objects, and relies
on dplyr solution rather than data.table handling, therefore allowing usage
of data frames with virtually unlimited dimensions without crashing. This
implementation uses same logic of different types of overlaps as the original
foverlaps solution ("any", "start", "end", "within", "equal"). The type "any"
is default and allows for any overlapping solution between 2 regions. The
type "start" only considers regions with exact same start position as
overlap; similarly type "end" considers regions overlapped when the end
positions are exact matches. Type "within" means that regions are overlapped
when one is contained in another and neither start nor end positions match.
Finally, type "equal" only considers overlap when both start and end
positions match for both regions. For any type, the presence of any
additional column not directly specifying regions (for example, Chromosome)
will serve similar to a grouping variable.
The generated output of this function will contain the overlapping regions
and all columns present in the data frame data1, as well as any columns from
the data frame supplied with data2 argument, except for those columns present
in data2 that are used for overlap. When the same columns are present in both
data1 and data2, the output data frame will have ".x" and ".y" suffixes to
indicate which original input data they are coming from.
}
\examples{
# obtain maf data
maf1 <- get_coding_ssm(
    these_sample_ids = "DOHH-2"
)

maf2 <- get_coding_ssm(
    these_sample_ids = "SU-DHL-4"
)

# The same mutations are not expected to be present in different samples
# so this overlap will produce 0 matching rows
overlap <- cool_overlaps(
    maf1,
    maf1,
    type = "equal"
)

# To demonstrate functionality we can supply the same maf to the data2
overlap <- cool_overlaps(
    maf1,
    maf1 \%>\% head
)

# We can also overlap different formats, for example
seg1 <- get_sample_cn_segments(these_sample_ids = "DOHH-2")
overlap <- cool_overlaps(
    data1 = maf1,
    data2 = seg1,
    columns2 = c("chrom", "start", "end")
)

}
