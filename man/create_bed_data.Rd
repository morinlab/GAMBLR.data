% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/genomic_data.R
\name{create_bed_data}
\alias{create_bed_data}
\title{Create BED Data}
\usage{
create_bed_data(
  bed_df,
  genome_build = NULL,
  fix_names = NULL,
  concat_cols = NULL,
  sep = ""
)
}
\arguments{
\item{bed_df}{A data frame containing the BED data.}

\item{genome_build}{A string specifying the genome build ("grch37" or "hg38").
If NULL, the function will try to infer the genome build from the object name.}

\item{fix_names}{Either NULL (the default), or one of "chrom_start_end" or "concat".
If not NULL and duplicate names are detected, the function will apply the chosen fix.}

\item{concat_cols}{When \code{fix_names = "concat"}, a character vector specifying which columns
from the original data to merge.}

\item{sep}{The separator to use when concatenating columns if fix_names = "concat".
Defaults to "" (no separator).}
}
\value{
A data frame with class attributes for BED data.
}
\description{
This function creates BED (Browser Extensible Data) objects from the given input.
It assumes that the BED data should have columns corresponding to chromosome, start,
and end. If the second and third columns are not numeric (as expected for start and end),
the function will attempt to identify the proper columns by matching column names.
}
\details{
In the output, the first three columns will be renamed to "chrom", "start", and "end".
If a fourth column exists, it is renamed to "name" (and any additional columns are preserved).

Additionally, if a "name" column exists and its values are not unique, the function
will warn the user. The user can optionally supply a method to automatically fix the
names via the \code{fix_names} argument:
\itemize{
\item If \code{fix_names = "chrom_start_end"}, the new name will be built as "chrom:start-end".
\item If \code{fix_names = "concat"}, then the columns specified by \code{concat_cols} (using the
original column names in the input data) will be concatenated to form the new name.
By default, no separator is used, but a separator can be specified via the \code{sep}
argument.
}

After applying the fix, the function checks if the new names are unique. If they are not,
a warning is issued that includes up to five examples of duplicate names and the row numbers
where they occur.
}
\examples{

# get a abed_data object for all aSHM regions
ashm_bed = create_bed_data(GAMBLR.data::grch37_ashm_regions,
                fix_names = "concat",
                concat_cols = c("gene","region"),
                sep="-")
# the build is automatically inferred if it is in the variable name
# get_genome_build(ashm_bed)
# [1] "grch37"

another_bed = create_bed_data(somatic_hypermutation_locations_GRCh37_v_latest,
                              fix_names = "concat",
                              concat_cols = c("chr_name","hg19_start","hg19_end"))

# get_genome_build(another_bed)
# [1] "grch37"

# get a bed_data object for all gene regions and combine several columns to make a unique name
gene_regions <- create_bed_data(hg38_gene_coordinates,
                    fix_names = "concat",
                    sep="-",
                    concat_cols = c("chromosome","start","end","gene_name"))
                    
#get_genome_build(gene_regions)
# [1] "hg38"                     


}
